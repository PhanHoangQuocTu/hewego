{"compiler":{"version":"0.8.18+commit.87f61d96"},"language":"Solidity","output":{"abi":[],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"contract-flattens/BondIssuance/BondIssuance_flatten.sol":"ReentrancyGuard"},"evmVersion":"paris","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[],"viaIR":true},"sources":{"contract-flattens/BondIssuance/BondIssuance_flatten.sol":{"keccak256":"0xfc582ca479071177abcbf787a22b8c72d07b84be92c86a17da60c333f2ee168a","license":"Apache-2.0 AND MIT","urls":["bzz-raw://57882dc4d67cba4cccbe965d534b1a5f647550b8fa476c2c77b0cbe049da2425","dweb:/ipfs/QmPRWGeL4arjw7XB7Bn5x8p3Mi6iRB7ctVsHVrZEHXwrJo"]}},"version":1}